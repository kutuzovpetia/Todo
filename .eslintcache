[{"/home/kutuzov/Рабочий стол/todoList/todo/src/index.js":"1","/home/kutuzov/Рабочий стол/todoList/todo/src/App.js":"2","/home/kutuzov/Рабочий стол/todoList/todo/src/components/header-nav-menu/index.jsx":"3","/home/kutuzov/Рабочий стол/todoList/todo/src/components/header-nav-menu/header-nav-menu.jsx":"4","/home/kutuzov/Рабочий стол/todoList/todo/src/components/content/index.jsx":"5","/home/kutuzov/Рабочий стол/todoList/todo/src/components/content/content.jsx":"6","/home/kutuzov/Рабочий стол/todoList/todo/src/reducer.js":"7","/home/kutuzov/Рабочий стол/todoList/todo/src/action.js":"8","/home/kutuzov/Рабочий стол/todoList/todo/src/components/card/index.jsx":"9","/home/kutuzov/Рабочий стол/todoList/todo/src/components/card/card.jsx":"10","/home/kutuzov/Рабочий стол/todoList/todo/src/components/list-item/index.jsx":"11","/home/kutuzov/Рабочий стол/todoList/todo/src/components/list-item/list-item.jsx":"12","/home/kutuzov/Рабочий стол/todoList/todo/src/data.js":"13","/home/kutuzov/Рабочий стол/todoList/todo/src/components/create-modal/index.jsx":"14","/home/kutuzov/Рабочий стол/todoList/todo/src/components/create-modal/createModal.jsx":"15","/home/kutuzov/Рабочий стол/todoList/todo/src/components/todoList/index.jsx":"16","/home/kutuzov/Рабочий стол/todoList/todo/src/components/todoList/todoList.jsx":"17","/home/kutuzov/Рабочий стол/todoList/todo/src/components/accordion-item/index.jsx":"18","/home/kutuzov/Рабочий стол/todoList/todo/src/components/accordion-item/accordion-item.jsx":"19","/home/kutuzov/Рабочий стол/todoList/todo/src/service-api/index.js":"20","/home/kutuzov/Рабочий стол/todoList/todo/src/components/plans/index.jsx":"21","/home/kutuzov/Рабочий стол/todoList/todo/src/components/plans/plans.jsx":"22"},{"size":437,"mtime":1612969062692,"results":"23","hashOfConfig":"24"},{"size":843,"mtime":1612970319293,"results":"25","hashOfConfig":"24"},{"size":76,"mtime":1611937525348,"results":"26","hashOfConfig":"24"},{"size":3276,"mtime":1613043117846,"results":"27","hashOfConfig":"24"},{"size":56,"mtime":1611955470148,"results":"28","hashOfConfig":"24"},{"size":1626,"mtime":1613039485302,"results":"29","hashOfConfig":"24"},{"size":3033,"mtime":1612987271009,"results":"30","hashOfConfig":"24"},{"size":1155,"mtime":1612987331746,"results":"31","hashOfConfig":"24"},{"size":47,"mtime":1611959607099,"results":"32","hashOfConfig":"24"},{"size":2176,"mtime":1613036558126,"results":"33","hashOfConfig":"24"},{"size":60,"mtime":1611999973671,"results":"34","hashOfConfig":"24"},{"size":1258,"mtime":1612695388931,"results":"35","hashOfConfig":"24"},{"size":1291,"mtime":1612005314469,"results":"36","hashOfConfig":"24"},{"size":68,"mtime":1612022056564,"results":"37","hashOfConfig":"24"},{"size":1524,"mtime":1612695964382,"results":"38","hashOfConfig":"24"},{"size":59,"mtime":1612099160966,"results":"39","hashOfConfig":"24"},{"size":1900,"mtime":1612975942631,"results":"40","hashOfConfig":"24"},{"size":75,"mtime":1612164552969,"results":"41","hashOfConfig":"24"},{"size":5851,"mtime":1613044000787,"results":"42","hashOfConfig":"24"},{"size":3234,"mtime":1612803822679,"results":"43","hashOfConfig":"24"},{"size":50,"mtime":1613039391773,"results":"44","hashOfConfig":"24"},{"size":1045,"mtime":1613041970163,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1kux2ex",{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"52"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},"/home/kutuzov/Рабочий стол/todoList/todo/src/index.js",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/App.js",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/header-nav-menu/index.jsx",[],["95","96"],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/header-nav-menu/header-nav-menu.jsx",["97","98","99","100","101"],"import React from \"react\";\nimport s from \"./style.module.scss\";\nimport { ListTask, Check2, Search, List, Grid } from \"react-bootstrap-icons\";\nimport {connect} from 'react-redux';\nimport * as actions from '../../action';\nimport { NavLink, Route, Redirect } from 'react-router-dom';\nimport ApiService from '../../service-api';\n\nconst HeaderNavMenu = (props) => {\n \n  const api = new ApiService();\n\n  // Функция возвращает количество запланированых событий\n  const plan = () =>{\n    let count = 0;\n    props.data.map((item)=>{\n        item.lists.map((item)=>{\n            if(item.date){\n              count++;\n            }\n        })\n    })\n    return count;\n  }\n\n  // Функция поиска по спискам\n  const searchLists = (e) =>{\n    if(!e.target.value){\n      api.getAllList().then((res) => {\n        props.setData(res.reverse());\n      });\n    }\n    const newData = props.data.filter((item)=>{\n      return item.title.toLowerCase().search(e.target.value.toLowerCase())!== -1;\n    }) \n    props.setData(newData)\n  }\n\n  return (\n    <nav className={s.wrapper}>\n     {\n       props.onList ? <button className={'btn btn-warning'} onClick={()=>{props.showList()}}>Назад</button> \n       : \n       <button \n      className={`btn btn-primary ${s.btnCreateList}`}\n      onClick={()=>{props.sCreateList()}}\n      >Создать список</button>\n     }\n\n      <div className={s.centerControls}>\n        <NavLink to={'lists'} className={\"btn btn-secondary\"}>{`Списки ${props.data.length}`}</NavLink>\n        <NavLink to={'plans'} className={\"btn btn-secondary\"}>{`Запланировано ${plan()}`}</NavLink>\n        <NavLink to={'/'} className={\"btn btn-secondary\"}>{`Сегодня ${0}`}</NavLink>\n      </div>\n\n      <div className={s.rightControls}>\n        \n        {\n          !props.onList ? \n          <button className={\"btn btn-secondary\"} onClick={()=>{props.setDisplay()}}>\n\n          { !props.display ? <ListTask /> : <Grid/> }\n          </button> \n         :\n          <button disabled={true} className={\"btn btn-secondary\"}>\n          { !props.display ? <ListTask /> : <Grid/> }\n          </button>\n        }\n\n        <button className={\"btn btn-secondary\"}>\n          <Check2 />\n        </button>\n\n        {\n          !props.onList ? \n          <button \n          className={\"btn btn-secondary\"}\n          onClick={()=>{ \n            props.showSearch();\n            if(props.onSearch){\n              api.getAllList().then((res) => {\n                props.setData(res.reverse());\n              });\n            }\n          }}>\n            <Search />\n          </button>\n          :\n          <button \n          disabled={true}\n          className={\"btn btn-secondary\"}>\n            <Search />\n          </button>\n        }\n       \n        <input type=\"text\" \n        className={`${props.onSearch ? s.onSearch : s.offSearch} form-control`} \n        placeholder={\"Найти\"}\n        onChange={(e)=>{searchLists(e)}}\n        />\n      </div>\n    </nav>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data,\n    display: state.display,\n    onList: state.onList,\n    onSearch: state.onSearch\n  };\n};\n\nexport default connect(mapStateToProps, actions)(HeaderNavMenu);\n","/home/kutuzov/Рабочий стол/todoList/todo/src/components/content/index.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/content/content.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/reducer.js",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/action.js",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/card/index.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/card/card.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/list-item/index.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/list-item/list-item.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/data.js",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/create-modal/index.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/create-modal/createModal.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/todoList/index.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/todoList/todoList.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/accordion-item/index.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/accordion-item/accordion-item.jsx",["102"],"import React, { useState } from \"react\";\nimport s from \"./style.module.scss\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport Card from \"react-bootstrap/Card\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport * as actions from '../../action';\nimport {connect} from 'react-redux';\nimport ApiService from '../../service-api';\nimport {CheckSquareFill} from 'react-bootstrap-icons';\n\nconst AccordionItem = (props) => {\n\n  const api = new ApiService();\n  // const [date, setDate] = useState(props.date);\n \n  const deleteTask  = (idCArd,idItem) => {\n    api.deleteTask(idCArd, idItem);// Удаляем с базы\n    props.deleteItemFromList(idItem, idCArd); // Удаляем из store\n  }\n\n \n\n  let color = null;\n    switch (props.priority) {\n        case 'Низкий': color = s.priorityBlue;\n            break;\n        case 'Средний': color = s.priorityOrange;\n            break;\n        case 'Высокий': color = s.priorityRed;\n            break;\n        default:\n            break;\n    }\n\n  return (\n    <div className={s.wrapper}>\n      <Card key={props.id} className={'mb-2 w-100'}>\n      <Accordion.Toggle as={Card.Header} eventKey={props.id} className={color}>\n        <div className={`${props.done ? s.titleChecked : s.title} d-flex justify-content-between`}>\n          {props.title}\n          <div>\n            <span className='mr-3'>{props.date}</span>\n          </div>\n        </div>\n      </Accordion.Toggle>\n      <Accordion.Collapse eventKey={props.id}>\n        <Card.Body className=\"d-flex justify-content-between flex-wrap\">\n          <div className={'w-100'}>\n            <h5>Заметки</h5>\n            <textarea cols=\"25\" rows=\"7\" \n            defaultValue={props.note} \n            onChange={(e)=>{ \n              api.task(props.objCard.id, props.id, {note: e.target.value});\n              props.addNote(props.id, props.objCard.id, e.target.value);\n            }}\n            />                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              \n          </div>\n          <div>\n            <h5>Дата выполнения</h5>\n            <button onClick={()=>{api.date(props.objCard.id, props.id,{date: 'Сегодня'}); props.addDate(props.id, props.objCard.id, 'Сегодня')}} className={`btn btn-dark mr-1 ${s.inputDate}`}>Сегодня</button>\n            <button onClick={()=>{api.date(props.objCard.id, props.id,{date: 'Завтра'}); props.addDate(props.id, props.objCard.id, 'Завтра')}} className={`btn btn-dark mr-1 ${s.inputDate}`}>Завтра</button>\n            <input type=\"date\" name=\"\" id=\"\" onChange={(e) => { api.date(props.objCard.id, props.id,{date: e.target.value}); props.addDate(props.id, props.objCard.id, e.target.value)}} className={`${s.inputDate} btn btn-info`} />\n            <h5 className='mt-2'>Приоритет</h5>\n            <DropdownButton id=\"dropdown-item-button\" title={props.priority} className={s.dropDown}>\n              <Dropdown.Item as=\"button\" onClick={()=>{api.priority(props.objCard.id , props.id ,{priority: 'Нет'}); props.addPriority(props.id, props.objCard.id, 'Нет')}}>Нет</Dropdown.Item>\n              <Dropdown.Item as=\"button\" onClick={()=>{api.priority(props.objCard.id , props.id ,{priority: 'Низкий'}); props.addPriority(props.id, props.objCard.id, 'Низкий')}}>Низкий</Dropdown.Item>\n              <Dropdown.Item as=\"button\" onClick={()=>{api.priority(props.objCard.id , props.id ,{priority: 'Средний'}); props.addPriority(props.id, props.objCard.id, 'Средний')}}>Средний</Dropdown.Item>\n              <Dropdown.Item as=\"button\" onClick={()=>{api.priority(props.objCard.id , props.id ,{priority: 'Высокий'}); props.addPriority(props.id, props.objCard.id, 'Высокий')}}>Высокий</Dropdown.Item>\n            </DropdownButton>\n\n            <button \n              className={`${s.btnDelete} btn btn-danger`} \n              onClick={()=>{ deleteTask(props.objCard.id, props.id);}}>Удалить\n            </button>\n            \n          </div>\n        </Card.Body>\n      </Accordion.Collapse>\n    </Card>\n    <button \n      className={s.doneBtn} onClick={()=>{\n        const api = new ApiService();\n        api.done(props.objCard.id, props.id, {done: !props.done})\n        props.doneCheck(props.objCard.id, props.id, !props.done)\n      }}>\n\n      <CheckSquareFill className={props.done ? s.checked : s.check}\n      /></button>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data\n  };\n  \n};\n\nexport default connect(mapStateToProps, actions)(AccordionItem);\n","/home/kutuzov/Рабочий стол/todoList/todo/src/service-api/index.js",["103","104","105","106"],"// import React, { Component } from 'react';\n// import * as actions from '../action';\n// import { connect } from \"react-redux\";\n\nexport default class ApiService {\n\n  _apiBase = \"http://localhost:3000/api/todo\";  \n\n  // Получение всех списков GET\n  async getResource(url) {\n    const res = await fetch(`${this._apiBase}${url}`);\n\n    if (!res.ok) {\n      throw new Error(`Could not fetch ${url}, received ${res.status}`);\n    }\n    return await res.json();\n  }\n\n  // Создание списка POST\n  async create(url, body) {\n    \n    const res = await fetch(`${this._apiBase}${url}`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(body),\n      })\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${url}, received ${res.status}`);\n      }\n      const content = await res.json();\n      // console.log(content.todo);\n      return content;\n  }\n\n  // Удаление DELETE\n  async delete(url, id) {\n   const res = await fetch(`${this._apiBase}${url}${id}`, {\n      method: \"DELETE\",\n      headers: { \"Content-Type\": \"application/json\" },\n    })\n    return await res;\n  }\n\n  // Удаление задачи из списка\n  async delTask(url, id1, id2) {\n    const res = await fetch(`${this._apiBase}${url}${id1}/${id2}`, {\n       method: \"DELETE\",\n       headers: { \"Content-Type\": \"application/json\" },\n     })\n     return await res;\n  }\n\n  // Изменение задачи PUT\n  async put(url, id1, id2, body) {\n    const res = await fetch(`${this._apiBase}${url}${id1}/${id2}`, {\n       method: \"PUT\",\n       mode: \"cors\",\n       headers: { \"Content-Type\": \"application/json\", \"Access-Control-Allow-Origin\" : \"*\"},\n       body: JSON.stringify(body),\n     })\n    return await res;\n  }\n\n  /*************************************************************************************/\n\n  // Получение всех списков\n  async getAllList() {\n    const res = await this.getResource(`/all/`);\n    return await res;\n  }\n\n  // Создание нового списка\n  async createNewList(body) {\n    const res = await this.create(`/new/`, body);\n    return await res;\n  }\n\n  // Удаление списка\n  async deleteById(id) {\n    const res = await this.delete(`/delete/`, id);\n    return await res;\n  }\n\n  // Удаление задачи из списка\n  async deleteTask(id1, id2){\n    const res = await this.delTask(`/del/`, id1, id2);\n    return await res;\n  }\n\n  // Добавление задачи в список\n  async addTask(id, body){\n    const res = await this.create(`/add/${id}`, body)\n    // console.log(await res);\n    return await res;\n  }\n\n  // Ставим/удаляем чекбокс\n  async done(id1, id2, body){\n    const res = await this.put(`/done/`, id1, id2, body)\n  }\n\n  // Изменяем приоритет задачи\n  async priority(id1, id2, body){\n    const res = await this.put(`/priority/`, id1, id2, body)\n  }\n\n  // Изменяем дату\n  async date(id1, id2, body){\n    const res = await this.put(`/date/`, id1, id2, body)\n  }\n\n  // Изменяем заметку\n  async task(id1, id2, body){\n    const res = await this.put(`/task/`, id1, id2, body)\n  }\n}\n\n\n\n\n","/home/kutuzov/Рабочий стол/todoList/todo/src/components/plans/index.jsx",[],"/home/kutuzov/Рабочий стол/todoList/todo/src/components/plans/plans.jsx",["107","108","109","110"],"import React, {useState} from 'react';\nimport s from './style.module.scss';\nimport { connect } from \"react-redux\";\nimport * as actions from '../../action.js';\n\nconst Plans = (props) =>{\n\n    \n   //Функция возвращает масив спланированых обьектов\n   const plansArr = (data) =>{\n    let d = [];\n    const plans = data.map((item)=>{\n        item.lists.map((it)=>{\n           if(it.date){\n               d.push(it);\n           }\n        })\n    })\n    return d;\n   }\n\n\n   return(\n       \n       <div className={s.wrapper}>\n           {\n             plansArr(props.data).map((item)=>{\n                  return(\n                    <div key={item.id} className={`${s.item}`}>\n                        <h5>{item.title}</h5>\n                        <h5>{item.date}</h5>\n                    </div>\n                  )\n              })\n          }\n       </div>\n   )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n      data: state.data,\n    };\n  };\n  \nexport default connect(mapStateToProps, actions)(Plans);",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":3,"column":36,"nodeType":"117","messageId":"118","endLine":3,"endColumn":40},{"ruleId":"115","severity":1,"message":"119","line":6,"column":19,"nodeType":"117","messageId":"118","endLine":6,"endColumn":24},{"ruleId":"115","severity":1,"message":"120","line":6,"column":26,"nodeType":"117","messageId":"118","endLine":6,"endColumn":34},{"ruleId":"121","severity":1,"message":"122","line":16,"column":26,"nodeType":"123","messageId":"124","endLine":16,"endColumn":28},{"ruleId":"121","severity":1,"message":"122","line":17,"column":30,"nodeType":"123","messageId":"124","endLine":17,"endColumn":32},{"ruleId":"115","severity":1,"message":"125","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"126","line":99,"column":11,"nodeType":"117","messageId":"118","endLine":99,"endColumn":14},{"ruleId":"115","severity":1,"message":"126","line":104,"column":11,"nodeType":"117","messageId":"118","endLine":104,"endColumn":14},{"ruleId":"115","severity":1,"message":"126","line":109,"column":11,"nodeType":"117","messageId":"118","endLine":109,"endColumn":14},{"ruleId":"115","severity":1,"message":"126","line":114,"column":11,"nodeType":"117","messageId":"118","endLine":114,"endColumn":14},{"ruleId":"115","severity":1,"message":"125","line":1,"column":16,"nodeType":"117","messageId":"118","endLine":1,"endColumn":24},{"ruleId":"115","severity":1,"message":"127","line":12,"column":11,"nodeType":"117","messageId":"118","endLine":12,"endColumn":16},{"ruleId":"121","severity":1,"message":"122","line":12,"column":34,"nodeType":"123","messageId":"124","endLine":12,"endColumn":36},{"ruleId":"121","severity":1,"message":"122","line":13,"column":28,"nodeType":"123","messageId":"124","endLine":13,"endColumn":30},"no-native-reassign",["128"],"no-negated-in-lhs",["129"],"no-unused-vars","'List' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Redirect' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","'res' is assigned a value but never used.","'plans' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]